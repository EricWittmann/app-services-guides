# Quarkus config
quarkus.ssl.native=true

# Configure the Kafka sink (we write to it)
mp.messaging.outgoing.generated-price.connector=smallrye-kafka
mp.messaging.outgoing.generated-price.topic=prices-complex
mp.messaging.outgoing.generated-price.value.serializer=io.apicurio.registry.serde.avro.AvroKafkaSerializer
mp.messaging.outgoing.generated-price.apicurio.registry.url=${REGISTRY_URL}
mp.messaging.outgoing.generated-price.apicurio.registry.auto-register=true
mp.messaging.outgoing.generated-price.apicurio.registry.avro-datum-provider=io.apicurio.registry.serde.avro.ReflectAvroDatumProvider
mp.messaging.outgoing.generated-price.apicurio.auth.service.url=${REGISTRY_IDP_URL}
mp.messaging.outgoing.generated-price.apicurio.auth.realm=${REGISTRY_IDP_REALM}
mp.messaging.outgoing.generated-price.apicurio.auth.client.id=${REGISTRY_CLIENT_ID}
mp.messaging.outgoing.generated-price.apicurio.auth.client.secret=${REGISTRY_CLIENT_SECRET}

# Configure the Kafka source (we read from it)
mp.messaging.incoming.prices.connector=smallrye-kafka
mp.messaging.incoming.prices.topic=prices-complex
mp.messaging.incoming.prices.value.deserializer=io.apicurio.registry.serde.avro.AvroKafkaDeserializer
mp.messaging.incoming.prices.apicurio.registry.url=${REGISTRY_URL}
mp.messaging.incoming.prices.apicurio.registry.avro-datum-provider=io.apicurio.registry.serde.avro.ReflectAvroDatumProvider
mp.messaging.incoming.prices.apicurio.auth.service.url=${REGISTRY_IDP_URL}
mp.messaging.incoming.prices.apicurio.auth.realm=${REGISTRY_IDP_REALM}
mp.messaging.incoming.prices.apicurio.auth.client.id=${REGISTRY_CLIENT_ID}
mp.messaging.incoming.prices.apicurio.auth.client.secret=${REGISTRY_CLIENT_SECRET}

# Configure docker config
quarkus.container-image.builder=jib
quarkus.kubernetes.deployment-target=kubernetes
quarkus.container-image.build=false
quarkus.container-image.push=false

## dev profile using user defined environment variables that uses SASL/OAUTHBEARER
## ./mvnw quarkus:dev 
## ./mvnw package -Dquarkus.profile=dev

%dev.kafka.bootstrap.servers=${BOOTSTRAP_SERVER}
%dev.kafka.security.protocol=SASL_SSL

#%dev.kafka.sasl.mechanism=OAUTHBEARER
#%dev.kafka.sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \
#  oauth.client.id="${CLIENT_ID}" \
#  oauth.client.secret="${CLIENT_SECRET}" \
#  oauth.token.endpoint.uri="${OAUTH_TOKEN_ENDPOINT_URI}" ;
#%dev.kafka.sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler

%dev.kafka.sasl.mechanism=PLAIN
%dev.kafka.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required \
  username="${CLIENT_ID}" \
  password="${CLIENT_SECRET}"; 
